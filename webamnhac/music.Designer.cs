//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 02/05/2017 12:37:51 CH
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WebBanNhacContext
{

    [DatabaseAttribute(Name = "Web_Ban_Nhac")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class WebBanNhacDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(WebBanNhacDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertBaihat(Baihat instance);
        partial void UpdateBaihat(Baihat instance);
        partial void DeleteBaihat(Baihat instance);
        partial void InsertCasi(Casi instance);
        partial void UpdateCasi(Casi instance);
        partial void DeleteCasi(Casi instance);
        partial void InsertKhachhang(Khachhang instance);
        partial void UpdateKhachhang(Khachhang instance);
        partial void DeleteKhachhang(Khachhang instance);
        partial void InsertNhacsi(Nhacsi instance);
        partial void UpdateNhacsi(Nhacsi instance);
        partial void DeleteNhacsi(Nhacsi instance);
        partial void InsertTheloai(Theloai instance);
        partial void UpdateTheloai(Theloai instance);
        partial void DeleteTheloai(Theloai instance);

        #endregion

        public WebBanNhacDataContext() :
        base(GetConnectionString("WebBanNhacDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public WebBanNhacDataContext(MappingSource mappingSource) :
        base(GetConnectionString("WebBanNhacDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public WebBanNhacDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WebBanNhacDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WebBanNhacDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WebBanNhacDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Baihat> Baihats
        {
            get
            {
                return this.GetTable<Baihat>();
            }
        }

        public Devart.Data.Linq.Table<Casi> Casis
        {
            get
            {
                return this.GetTable<Casi>();
            }
        }

        public Devart.Data.Linq.Table<Khachhang> Khachhangs
        {
            get
            {
                return this.GetTable<Khachhang>();
            }
        }

        public Devart.Data.Linq.Table<Nhacsi> Nhacsis
        {
            get
            {
                return this.GetTable<Nhacsi>();
            }
        }

        public Devart.Data.Linq.Table<Theloai> Theloais
        {
            get
            {
                return this.GetTable<Theloai>();
            }
        }
    }
}

namespace WebBanNhacContext
{

    /// <summary>
    /// There are no comments for WebBanNhacContext.Baihat in the schema.
    /// </summary>
    [Table(Name = @"dbo.baihat")]
    public partial class Baihat : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Ten;

        private string _Ma;

        private System.Nullable<System.DateTime> _Thoigianphathanh;

        private System.Nullable<System.DateTime> _Thoigianban;

        private string _Thongtin;

        private string _Anh;

        private string _Linkbaihat;

        private System.Nullable<double> _Gia;

        private string _Tentheloai;

        private string _Macasi;

        private string _Manhacsi;
        #pragma warning restore 0649

        private EntityRef<Theloai> _Theloai;

        private EntityRef<Nhacsi> _Nhacsi;

        private EntityRef<Casi> _Casi;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTenChanging(string value);
        partial void OnTenChanged();
        partial void OnMaChanging(string value);
        partial void OnMaChanged();
        partial void OnThoigianphathanhChanging(System.Nullable<System.DateTime> value);
        partial void OnThoigianphathanhChanged();
        partial void OnThoigianbanChanging(System.Nullable<System.DateTime> value);
        partial void OnThoigianbanChanged();
        partial void OnThongtinChanging(string value);
        partial void OnThongtinChanged();
        partial void OnAnhChanging(string value);
        partial void OnAnhChanged();
        partial void OnLinkbaihatChanging(string value);
        partial void OnLinkbaihatChanged();
        partial void OnGiaChanging(System.Nullable<double> value);
        partial void OnGiaChanged();
        partial void OnTentheloaiChanging(string value);
        partial void OnTentheloaiChanged();
        partial void OnMacasiChanging(string value);
        partial void OnMacasiChanged();
        partial void OnManhacsiChanging(string value);
        partial void OnManhacsiChanged();
        #endregion

        public Baihat()
        {
            this._Theloai  = default(EntityRef<Theloai>);
            this._Nhacsi  = default(EntityRef<Nhacsi>);
            this._Casi  = default(EntityRef<Casi>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Ten in the schema.
        /// </summary>
        [Column(Name = @"ten", Storage = "_Ten", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Ten
        {
            get
            {
                return this._Ten;
            }
            set
            {
                if (this._Ten != value)
                {
                    this.OnTenChanging(value);
                    this.SendPropertyChanging();
                    this._Ten = value;
                    this.SendPropertyChanged("Ten");
                    this.OnTenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ma in the schema.
        /// </summary>
        [Column(Name = @"ma", Storage = "_Ma", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string Ma
        {
            get
            {
                return this._Ma;
            }
            set
            {
                if (this._Ma != value)
                {
                    this.OnMaChanging(value);
                    this.SendPropertyChanging();
                    this._Ma = value;
                    this.SendPropertyChanged("Ma");
                    this.OnMaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thoigianphathanh in the schema.
        /// </summary>
        [Column(Name = @"thoigianphathanh", Storage = "_Thoigianphathanh", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Thoigianphathanh
        {
            get
            {
                return this._Thoigianphathanh;
            }
            set
            {
                if (this._Thoigianphathanh != value)
                {
                    this.OnThoigianphathanhChanging(value);
                    this.SendPropertyChanging();
                    this._Thoigianphathanh = value;
                    this.SendPropertyChanged("Thoigianphathanh");
                    this.OnThoigianphathanhChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thoigianban in the schema.
        /// </summary>
        [Column(Name = @"thoigianban", Storage = "_Thoigianban", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Thoigianban
        {
            get
            {
                return this._Thoigianban;
            }
            set
            {
                if (this._Thoigianban != value)
                {
                    this.OnThoigianbanChanging(value);
                    this.SendPropertyChanging();
                    this._Thoigianban = value;
                    this.SendPropertyChanged("Thoigianban");
                    this.OnThoigianbanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thongtin in the schema.
        /// </summary>
        [Column(Name = @"thongtin", Storage = "_Thongtin", DbType = "NVARCHAR(1000)", UpdateCheck = UpdateCheck.Never)]
        public string Thongtin
        {
            get
            {
                return this._Thongtin;
            }
            set
            {
                if (this._Thongtin != value)
                {
                    this.OnThongtinChanging(value);
                    this.SendPropertyChanging();
                    this._Thongtin = value;
                    this.SendPropertyChanged("Thongtin");
                    this.OnThongtinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anh in the schema.
        /// </summary>
        [Column(Name = @"anh", Storage = "_Anh", DbType = "NVARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string Anh
        {
            get
            {
                return this._Anh;
            }
            set
            {
                if (this._Anh != value)
                {
                    this.OnAnhChanging(value);
                    this.SendPropertyChanging();
                    this._Anh = value;
                    this.SendPropertyChanged("Anh");
                    this.OnAnhChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Linkbaihat in the schema.
        /// </summary>
        [Column(Name = @"linkbaihat", Storage = "_Linkbaihat", DbType = "NVARCHAR(1000)", UpdateCheck = UpdateCheck.Never)]
        public string Linkbaihat
        {
            get
            {
                return this._Linkbaihat;
            }
            set
            {
                if (this._Linkbaihat != value)
                {
                    this.OnLinkbaihatChanging(value);
                    this.SendPropertyChanging();
                    this._Linkbaihat = value;
                    this.SendPropertyChanged("Linkbaihat");
                    this.OnLinkbaihatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gia in the schema.
        /// </summary>
        [Column(Name = @"gia", Storage = "_Gia", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Gia
        {
            get
            {
                return this._Gia;
            }
            set
            {
                if (this._Gia != value)
                {
                    this.OnGiaChanging(value);
                    this.SendPropertyChanging();
                    this._Gia = value;
                    this.SendPropertyChanged("Gia");
                    this.OnGiaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tentheloai in the schema.
        /// </summary>
        [Column(Name = @"tentheloai", Storage = "_Tentheloai", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Tentheloai
        {
            get
            {
                return this._Tentheloai;
            }
            set
            {
                if (this._Tentheloai != value)
                {
                    if (this._Theloai.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTentheloaiChanging(value);
                    this.SendPropertyChanging();
                    this._Tentheloai = value;
                    this.SendPropertyChanged("Tentheloai");
                    this.OnTentheloaiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Macasi in the schema.
        /// </summary>
        [Column(Name = @"macasi", Storage = "_Macasi", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Macasi
        {
            get
            {
                return this._Macasi;
            }
            set
            {
                if (this._Macasi != value)
                {
                    if (this._Casi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMacasiChanging(value);
                    this.SendPropertyChanging();
                    this._Macasi = value;
                    this.SendPropertyChanged("Macasi");
                    this.OnMacasiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Manhacsi in the schema.
        /// </summary>
        [Column(Name = @"manhacsi", Storage = "_Manhacsi", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Manhacsi
        {
            get
            {
                return this._Manhacsi;
            }
            set
            {
                if (this._Manhacsi != value)
                {
                    if (this._Nhacsi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnManhacsiChanging(value);
                    this.SendPropertyChanging();
                    this._Manhacsi = value;
                    this.SendPropertyChanged("Manhacsi");
                    this.OnManhacsiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Theloai in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Theloai_Baihat", Storage="_Theloai", ThisKey="Tentheloai", OtherKey="Tentheloai", IsForeignKey=true)]
        public Theloai Theloai
        {
            get
            {
                return this._Theloai.Entity;
            }
            set
            {
                Theloai previousValue = this._Theloai.Entity;
                if ((previousValue != value) || (this._Theloai.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Theloai.Entity = null;
                        previousValue.Baihats.Remove(this);
                    }
                    this._Theloai.Entity = value;
                    if (value != null)
                    {
                        this._Tentheloai = value.Tentheloai;
                        value.Baihats.Add(this);
                    }
                    else
                    {
                        this._Tentheloai = default(string);
                    }
                    this.SendPropertyChanged("Theloai");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nhacsi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nhacsi_Baihat", Storage="_Nhacsi", ThisKey="Manhacsi", OtherKey="Manhacsi", IsForeignKey=true)]
        public Nhacsi Nhacsi
        {
            get
            {
                return this._Nhacsi.Entity;
            }
            set
            {
                Nhacsi previousValue = this._Nhacsi.Entity;
                if ((previousValue != value) || (this._Nhacsi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Nhacsi.Entity = null;
                        previousValue.Baihats.Remove(this);
                    }
                    this._Nhacsi.Entity = value;
                    if (value != null)
                    {
                        this._Manhacsi = value.Manhacsi;
                        value.Baihats.Add(this);
                    }
                    else
                    {
                        this._Manhacsi = default(string);
                    }
                    this.SendPropertyChanged("Nhacsi");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Casi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Casi_Baihat", Storage="_Casi", ThisKey="Macasi", OtherKey="Macasi", IsForeignKey=true)]
        public Casi Casi
        {
            get
            {
                return this._Casi.Entity;
            }
            set
            {
                Casi previousValue = this._Casi.Entity;
                if ((previousValue != value) || (this._Casi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Casi.Entity = null;
                        previousValue.Baihats.Remove(this);
                    }
                    this._Casi.Entity = value;
                    if (value != null)
                    {
                        this._Macasi = value.Macasi;
                        value.Baihats.Add(this);
                    }
                    else
                    {
                        this._Macasi = default(string);
                    }
                    this.SendPropertyChanged("Casi");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WebBanNhacContext.Casi in the schema.
    /// </summary>
    [Table(Name = @"dbo.casi")]
    public partial class Casi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Tencasi;

        private string _Thongtin;

        private string _Macasi;
        #pragma warning restore 0649

        private EntitySet<Baihat> _Baihats;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTencasiChanging(string value);
        partial void OnTencasiChanged();
        partial void OnThongtinChanging(string value);
        partial void OnThongtinChanged();
        partial void OnMacasiChanging(string value);
        partial void OnMacasiChanged();
        #endregion

        public Casi()
        {
            this._Baihats = new EntitySet<Baihat>(new Action<Baihat>(this.attach_Baihats), new Action<Baihat>(this.detach_Baihats));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Tencasi in the schema.
        /// </summary>
        [Column(Name = @"tencasi", Storage = "_Tencasi", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Tencasi
        {
            get
            {
                return this._Tencasi;
            }
            set
            {
                if (this._Tencasi != value)
                {
                    this.OnTencasiChanging(value);
                    this.SendPropertyChanging();
                    this._Tencasi = value;
                    this.SendPropertyChanged("Tencasi");
                    this.OnTencasiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thongtin in the schema.
        /// </summary>
        [Column(Name = @"thongtin", Storage = "_Thongtin", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Thongtin
        {
            get
            {
                return this._Thongtin;
            }
            set
            {
                if (this._Thongtin != value)
                {
                    this.OnThongtinChanging(value);
                    this.SendPropertyChanging();
                    this._Thongtin = value;
                    this.SendPropertyChanged("Thongtin");
                    this.OnThongtinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Macasi in the schema.
        /// </summary>
        [Column(Name = @"macasi", Storage = "_Macasi", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string Macasi
        {
            get
            {
                return this._Macasi;
            }
            set
            {
                if (this._Macasi != value)
                {
                    this.OnMacasiChanging(value);
                    this.SendPropertyChanging();
                    this._Macasi = value;
                    this.SendPropertyChanged("Macasi");
                    this.OnMacasiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baihats in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Casi_Baihat", Storage="_Baihats", ThisKey="Macasi", OtherKey="Macasi", DeleteRule="NO ACTION")]
        public EntitySet<Baihat> Baihats
        {
            get
            {
                return this._Baihats;
            }
            set
            {
                this._Baihats.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Casi = this;
        }
    
        private void detach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Casi = null;
        }
    }

    /// <summary>
    /// There are no comments for WebBanNhacContext.Khachhang in the schema.
    /// </summary>
    [Table(Name = @"dbo.khachhang")]
    public partial class Khachhang : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _TenKH;

        private string _MaKH;

        private string _Sodienthoai;

        private string _Diachi;

        private string _Taikhoan;

        private string _Matkhau;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTenKHChanging(string value);
        partial void OnTenKHChanged();
        partial void OnMaKHChanging(string value);
        partial void OnMaKHChanged();
        partial void OnSodienthoaiChanging(string value);
        partial void OnSodienthoaiChanged();
        partial void OnDiachiChanging(string value);
        partial void OnDiachiChanged();
        partial void OnTaikhoanChanging(string value);
        partial void OnTaikhoanChanged();
        partial void OnMatkhauChanging(string value);
        partial void OnMatkhauChanged();
        #endregion

        public Khachhang()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TenKH in the schema.
        /// </summary>
        [Column(Name = @"tenKH", Storage = "_TenKH", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string TenKH
        {
            get
            {
                return this._TenKH;
            }
            set
            {
                if (this._TenKH != value)
                {
                    this.OnTenKHChanging(value);
                    this.SendPropertyChanging();
                    this._TenKH = value;
                    this.SendPropertyChanged("TenKH");
                    this.OnTenKHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaKH in the schema.
        /// </summary>
        [Column(Name = @"maKH", Storage = "_MaKH", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string MaKH
        {
            get
            {
                return this._MaKH;
            }
            set
            {
                if (this._MaKH != value)
                {
                    this.OnMaKHChanging(value);
                    this.SendPropertyChanging();
                    this._MaKH = value;
                    this.SendPropertyChanged("MaKH");
                    this.OnMaKHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sodienthoai in the schema.
        /// </summary>
        [Column(Name = @"sodienthoai", Storage = "_Sodienthoai", DbType = "VARCHAR(11)", UpdateCheck = UpdateCheck.Never)]
        public string Sodienthoai
        {
            get
            {
                return this._Sodienthoai;
            }
            set
            {
                if (this._Sodienthoai != value)
                {
                    this.OnSodienthoaiChanging(value);
                    this.SendPropertyChanging();
                    this._Sodienthoai = value;
                    this.SendPropertyChanged("Sodienthoai");
                    this.OnSodienthoaiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Diachi in the schema.
        /// </summary>
        [Column(Name = @"diachi", Storage = "_Diachi", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Diachi
        {
            get
            {
                return this._Diachi;
            }
            set
            {
                if (this._Diachi != value)
                {
                    this.OnDiachiChanging(value);
                    this.SendPropertyChanging();
                    this._Diachi = value;
                    this.SendPropertyChanged("Diachi");
                    this.OnDiachiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Taikhoan in the schema.
        /// </summary>
        [Column(Name = @"taikhoan", Storage = "_Taikhoan", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Taikhoan
        {
            get
            {
                return this._Taikhoan;
            }
            set
            {
                if (this._Taikhoan != value)
                {
                    this.OnTaikhoanChanging(value);
                    this.SendPropertyChanging();
                    this._Taikhoan = value;
                    this.SendPropertyChanged("Taikhoan");
                    this.OnTaikhoanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Matkhau in the schema.
        /// </summary>
        [Column(Name = @"matkhau", Storage = "_Matkhau", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Matkhau
        {
            get
            {
                return this._Matkhau;
            }
            set
            {
                if (this._Matkhau != value)
                {
                    this.OnMatkhauChanging(value);
                    this.SendPropertyChanging();
                    this._Matkhau = value;
                    this.SendPropertyChanged("Matkhau");
                    this.OnMatkhauChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WebBanNhacContext.Nhacsi in the schema.
    /// </summary>
    [Table(Name = @"dbo.nhacsi")]
    public partial class Nhacsi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Tennhacsi;

        private string _Manhacsi;
        #pragma warning restore 0649

        private EntitySet<Baihat> _Baihats;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTennhacsiChanging(string value);
        partial void OnTennhacsiChanged();
        partial void OnManhacsiChanging(string value);
        partial void OnManhacsiChanged();
        #endregion

        public Nhacsi()
        {
            this._Baihats = new EntitySet<Baihat>(new Action<Baihat>(this.attach_Baihats), new Action<Baihat>(this.detach_Baihats));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Tennhacsi in the schema.
        /// </summary>
        [Column(Name = @"tennhacsi", Storage = "_Tennhacsi", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Tennhacsi
        {
            get
            {
                return this._Tennhacsi;
            }
            set
            {
                if (this._Tennhacsi != value)
                {
                    this.OnTennhacsiChanging(value);
                    this.SendPropertyChanging();
                    this._Tennhacsi = value;
                    this.SendPropertyChanged("Tennhacsi");
                    this.OnTennhacsiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Manhacsi in the schema.
        /// </summary>
        [Column(Name = @"manhacsi", Storage = "_Manhacsi", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string Manhacsi
        {
            get
            {
                return this._Manhacsi;
            }
            set
            {
                if (this._Manhacsi != value)
                {
                    this.OnManhacsiChanging(value);
                    this.SendPropertyChanging();
                    this._Manhacsi = value;
                    this.SendPropertyChanged("Manhacsi");
                    this.OnManhacsiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baihats in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nhacsi_Baihat", Storage="_Baihats", ThisKey="Manhacsi", OtherKey="Manhacsi", DeleteRule="NO ACTION")]
        public EntitySet<Baihat> Baihats
        {
            get
            {
                return this._Baihats;
            }
            set
            {
                this._Baihats.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Nhacsi = this;
        }
    
        private void detach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Nhacsi = null;
        }
    }

    /// <summary>
    /// There are no comments for WebBanNhacContext.Theloai in the schema.
    /// </summary>
    [Table(Name = @"dbo.theloai")]
    public partial class Theloai : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Tentheloai;

        private string _Matheloai;
        #pragma warning restore 0649

        private EntitySet<Baihat> _Baihats;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTentheloaiChanging(string value);
        partial void OnTentheloaiChanged();
        partial void OnMatheloaiChanging(string value);
        partial void OnMatheloaiChanged();
        #endregion

        public Theloai()
        {
            this._Baihats = new EntitySet<Baihat>(new Action<Baihat>(this.attach_Baihats), new Action<Baihat>(this.detach_Baihats));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Tentheloai in the schema.
        /// </summary>
        [Column(Name = @"tentheloai", Storage = "_Tentheloai", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Tentheloai
        {
            get
            {
                return this._Tentheloai;
            }
            set
            {
                if (this._Tentheloai != value)
                {
                    this.OnTentheloaiChanging(value);
                    this.SendPropertyChanging();
                    this._Tentheloai = value;
                    this.SendPropertyChanged("Tentheloai");
                    this.OnTentheloaiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Matheloai in the schema.
        /// </summary>
        [Column(Name = @"matheloai", Storage = "_Matheloai", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Matheloai
        {
            get
            {
                return this._Matheloai;
            }
            set
            {
                if (this._Matheloai != value)
                {
                    this.OnMatheloaiChanging(value);
                    this.SendPropertyChanging();
                    this._Matheloai = value;
                    this.SendPropertyChanged("Matheloai");
                    this.OnMatheloaiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baihats in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Theloai_Baihat", Storage="_Baihats", ThisKey="Tentheloai", OtherKey="Tentheloai", DeleteRule="NO ACTION")]
        public EntitySet<Baihat> Baihats
        {
            get
            {
                return this._Baihats;
            }
            set
            {
                this._Baihats.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Theloai = this;
        }
    
        private void detach_Baihats(Baihat entity)
        {
            this.SendPropertyChanging("Baihats");
            entity.Theloai = null;
        }
    }

}
